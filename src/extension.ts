'use strict';

import * as vscode from 'vscode'

class MTAFunction {
	side: number;
	label: string;
	args: string[];
	returnType: string;
	description: string;
	argDescs: { [key: string]: string };

	/**
	 * 
	 * @param side 0 For Server-Side, 1 For Client-Side
	 * @param label The actual function name
	 * @param description The description of the function
	 * @param returnType The return type of the function
	 * @param args An array containing all arguments and their types
	 * @param argDescs A dictionary containing all arguments and their description (Key argument, Value description)
	 */
	constructor(side: number, label: string, description: string, returnType: string, args: string[], argDescs: { [key: string]: string }) {
		this.side = side;
		this.label = label;
		this.args = args;
		this.returnType = returnType;
		this.description = description;
		this.argDescs = argDescs;
	}

	getMarkdown(): vscode.MarkdownString {
		let str = new vscode.MarkdownString();
		str.appendMarkdown("**" + this.label + "** - *" + (this.side == 1 ? "Client-Side" : "Server-Side") + "*\n\n" + this.description + "\n\n");
		str.appendCodeblock(this.returnType + " " + this.label + " ( " + this.args.join(", ") + " )", "mtalua");
		for (const key in this.argDescs) {
			if (this.argDescs.hasOwnProperty(key)) {
				const element = this.argDescs[key];
				str.appendMarkdown("- **" + key + "**: " + element + "\n");
			}
		}
		return str;
	}

	toCompletionItem(): vscode.CompletionItem {
		let item = new vscode.CompletionItem(this.label, vscode.CompletionItemKind.Function);
		item.documentation = this.getMarkdown();
		return item;
	}
}

export function activate(context: vscode.ExtensionContext) {
	vscode.languages.registerCompletionItemProvider('mtalua', {
		provideCompletionItems(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, context: vscode.CompletionContext) {
			return [
				/*new MTAFunction(0, "addAccount", "This function adds an account to the list of registered accounts of the current server.", "account", [
					"string name",
					"string pass",
					"bool allowCaseVariations = false"
				],
					{
						"name": "The name of the account you wish to make, this normally is the player's name.",
						"pass": "The password to set for this account for future logins.",
						"allowCaseVariations": "Whether the username is case sensitive (if this is set to true, usernames \"Bob\" and \"bob\" will refer to different accounts)",
					}
				).toCompletionItem(),
				new MTAFunction(0, "copyAccountData", "This function copies all of the data from one account to another.", "bool", [
					"account theAccount",
					"account fromAccount"
				],
					{
						"theAccount": "The account you wish to copy the data to.",
						"fromAccount": "The account you wish to copy the data from."
					}
				).toCompletionItem(),
				new MTAFunction(0, "getAccountData", "This function retrieves a string that has been stored using setAccountData. Data stored as account data is persistent across user's sessions and maps, unless they are logged into a guest account.", "string", [
					"account theAccount",
					"string key"
				], {
						"theAccount": "The account you wish to retrieve the data from.",
						"key": "The key under which the data is stored",
					}
				).toCompletionItem(),
				new MTAFunction(0, "getAccountName", "This function retrieves the name of an account.", "string", [
					"theAccount"
				], {
						"theAccount": "The account you wish to get the name of."
					}
				).toCompletionItem(),
				new MTAFunction(0, "getAccountPlayer", "This function returns the player element that is currently using a specified account, i.e. is logged into it. Only one player can use an account at a time.", "player", [
					"theAccount"
				], {
						"theAccount": "The account you wish to get the player of."
					}
				).toCompletionItem(),
				new MTAFunction(0, "getAccountsBySerial", "This function returns a table containing all accounts that were logged onto from specified serial. If the serial is empty string, it will return all accounts that were never logged onto.", "table", [
					"serial"
				], {
						"serial": "The serial to get accounts from"
					}
				).toCompletionItem(),
				new MTAFunction(0, "getAccountSerial", "This function returns the last serial that logged onto the specified account.", "string", [
					"theAccount"
				], {
						"theAccount": "The account to get serial from"
					}
				).toCompletionItem(),*/

				new MTAFunction(0, "getaccounts", "This function returns a table over all the accounts that exist in the server internal.db file. (Note: accounts.xml is no longer used after version 1.0.4)", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "getAccountData", "", "", ["account theAccount", "string key"], {}).toCompletionItem(),
				new MTAFunction(0, "getAccountsBySerial", "This function returns a table containing all accounts that were logged onto from specified serial. If the serial is empty string, it will return all accounts that were never logged onto.", "", ["string serial"], {}).toCompletionItem(),
				new MTAFunction(0, "getBanIP", "This function will return the IP of the specified ban.", "", ["ban theBan"], {}).toCompletionItem(),
				new MTAFunction(0, "getBanNick", "This function will return the nickname (nickname that the player had when he was banned) of the specified ban.", "", ["ban theBan"], {}).toCompletionItem(),
				new MTAFunction(0, "getAccountSerial", "This function returns the last serial that logged onto the specified account.", "", ["account theAccount"], {}).toCompletionItem(),
				new MTAFunction(0, "getAllAccountData", "This function returns a table containing all the user data for the account provided", "", ["account theAccount"], {}).toCompletionItem(),
				new MTAFunction(0, "copyAccountData", "This function copies all of the data from one account to another.", "", ["account theAccount", "account fromAccount"], {}).toCompletionItem(),
				new MTAFunction(0, "getAccountPlayer", "", "", ["account theAccount"], {}).toCompletionItem(),
				new MTAFunction(0, "banPlayer", "This function will ban the specified player by either IP, serial or username", "", ["player bannedPlayer", "[ bool IP = true", "bool Username = false", "bool Serial = false", "player/string responsiblePlayer = nil", "string reason = nil", "int seconds = 0 ]"], {}).toCompletionItem(),
				new MTAFunction(0, "getAccountName", "", "", ["account theAccount"], {}).toCompletionItem(),
				new MTAFunction(0, "copyResource", "This function copies a specified resource with a new name.", "", ["resource theResource", "string newResourceName [", "string organizationalDir ]"], {}).toCompletionItem(),
				new MTAFunction(0, "textItemGetPriority", "", "", ["textitem textitemToCheck"], {}).toCompletionItem(),
				new MTAFunction(0, "getBanAdmin", "This function will return the responsible admin (nickname of the admin) of the specified ban.", "", ["ban theBan"], {}).toCompletionItem(),
				new MTAFunction(0, "setServerConfigSetting", "This function sets server settings which are stored in the mtaserver.conf file.", "", ["string name", "string value", "[ bool bSave = false ]"], {}).toCompletionItem(),
				new MTAFunction(0, "setTeamColor", "This function is for setting the color of a specified team. This color is shown, for example, in the team players' nametags.", "", ["team theTeam", "int colorR", "int colorG", "int colorB"], {}).toCompletionItem(),
				new MTAFunction(0, "textItemGetText", "This function returns the current text of the specified textitem.", "", ["textitem theTextitem"], {}).toCompletionItem(),
				new MTAFunction(0, "getinteriorsoundsenabled", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "getjetpackweaponenabled", "This function checks if a weapon is usable while on a Jetpack.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "setBanAdmin", "This function sets a new admin for a ban.", "", ["ban theBan", "string theAdmin"], {}).toCompletionItem(),
				new MTAFunction(0, "aclsave", "The ACL XML file is automatically saved whenever the ACL is modified, but the automatic save can be delayed by up to 10 seconds for performance reasons. Calling this function will force an immediate save.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "setAccountData", "", "", ["account theAccount", "string key", "string value"], {}).toCompletionItem(),
				new MTAFunction(0, "getAccount", "This function returns an account for a specific user. This function checks if the account mentioned exists in the internal.db database file.", "", ["string username", "[ string password ]"], {}).toCompletionItem(),
				new MTAFunction(0, "addAccount", "", "", ["string name", "string pass[", "bool allowCaseVariations = false]"], {}).toCompletionItem(),
				new MTAFunction(0, "getBanTime", "This function will return the time the specified ban was created, in seconds.", "", ["ban theBan"], {}).toCompletionItem(),
				new MTAFunction(0, "setbanreason", "This function sets the reason for the specified ban.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "getPlayerAccount", "This function returns the specified player's account object.", "", ["player thePlayer"], {}).toCompletionItem(),
				new MTAFunction(0, "isGuestAccount", "This function checks to see if an account is a guest account. A guest account is an account automatically created for a user when they join the server and deleted when they quit or login to another account. Data stored in a guest account is not stored after the player has left the server. As a consequence, this function will check if a player is logged in or not.", "", ["account theAccount"], {}).toCompletionItem(),
				new MTAFunction(0, "getUnbanTime", "This function will return the unbanning time of the specified ban in seconds.", "", ["ban theBan"], {}).toCompletionItem(),
				new MTAFunction(0, "getBanSerial", "This function will return the serial of the specified ban.", "", ["ban theBan"], {}).toCompletionItem(),
				new MTAFunction(0, "setGameType", "This function sets a string containing a name for the game type. This should be the game-mode that is active, for example \"Capture The Flag\" or \"Deathmatch\". This is then displayed in the server browser and external server browsers.", "", ["string gameType"], {}).toCompletionItem(),
				new MTAFunction(0, "logOut", "This function logs the given player out of his current account.", "", ["player thePlayer"], {}).toCompletionItem(),
				new MTAFunction(0, "clearElementVisibleTo", "This function clears any settings added by setElementVisibleTo and restores an element to its default visibility. This does not work with all entities - vehicles, players and objects are exempt. This is because these objects are required for accurate sync (they're physical objects). This function is particularily useful for changing the visibility of markers, radar blips and radar areas.", "", ["element theElement"], {}).toCompletionItem(),
				new MTAFunction(0, "setVehiclesLODDistance", "Sets the distance of vehicles LOD.", "", ["float vehiclesDistance", "float trainsAndPlanesDistance = vehiclesDistance * 2.14"], {}).toCompletionItem(),
				new MTAFunction(0, "textCreateTextItem", "This function creates a text item. A text item represents a single area of text, much like a label does in standard GUI programming. A text item can only be seen by players if it is added to a textdisplay using textDisplayAddText. Each text item can be added to multiple displays, if need be.", "", ["string text", "float x", "float y", "[string priority", "int red = 255", "int green = 255", "int blue = 255", "int alpha = 255", "float scale = 1", "string alignX = \"left\"", "string alignY = \"top\"", "int shadowAlpha = 0]"], {}).toCompletionItem(),
				new MTAFunction(0, "addBan", "This function will add a ban for the specified IP/username/serial to the server.", "", ["[ string IP", "string Username", "string Serial", "player responsibleElement", "string reason", "int seconds = 0 ]"], {}).toCompletionItem(),
				new MTAFunction(0, "kickPlayer", "", "", ["player kickedPlayer", "[ player/string responsiblePlayer", "string reason = \"\" ]"], {}).toCompletionItem(),
				new MTAFunction(0, "setPedAnalogControlState", "", "", ["ped thePed", "string control", "float state"], {}).toCompletionItem(),
				new MTAFunction(0, "getRuleValue", "", "", ["string key"], {}).toCompletionItem(),
				new MTAFunction(0, "getgametype", "This function retrieves the current gametype as set by setGameType. The game type is displayed in the server browser next to the server's name.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "getBanUsername", "", "", ["ban theBan"], {}).toCompletionItem(),
				new MTAFunction(0, "setMapName", "This function is used to set a map name that will be visible in the server browser. In practice you should generally rely on the mapmanager to do this for you.", "", ["string mapName"], {}).toCompletionItem(),
				new MTAFunction(0, "getserverpassword", "This function returns the current password required to join the server.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "getPedGravity", "", "", ["ped thePed"], {}).toCompletionItem(),
				new MTAFunction(0, "getBanReason", "This function will return the ban reason of the specified ban.", "", ["ban theBan"], {}).toCompletionItem(),
				new MTAFunction(0, "isBan", "This function checks whether the passed value is valid ban or not.This example chechks if the passed argument is a ban or not.", "", ["ban theBan"], {}).toCompletionItem(),
				new MTAFunction(0, "setAccountPassword", "This function sets the password of the specified account.", "", ["account theAccount", "string password[", "string passwordType=\"plaintext\"]"], {}).toCompletionItem(),
				new MTAFunction(0, "aclreload", "This function reloads the ACL's and the ACL groups from the ACL XML file. All ACL and ACL group elements are invalid after a call to this and should not be used anymore.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "float textItemGetPosition", "This function allows retrieval of the position of a text item.", "", ["textitem theTextItem"], {}).toCompletionItem(),
				new MTAFunction(0, "createTeam", "This function is for creating a new team, which can be used to group players. Players will not join the team until they are respawned.", "", ["string teamName", "[int colorR = 255", "int colorG = 255", "int colorB = 255]"], {}).toCompletionItem(),
				new MTAFunction(0, "int int int textItemGetColor", "This function allows you to retrieve the color of a text item.", "", ["textitem theTextItem"], {}).toCompletionItem(),
				new MTAFunction(0, "cloneElement", "This function clones (creates an exact copy of) an already existing element. The root node, and player elements, cannot be cloned. If a player element is a child of an element that is cloned, it will be skipped, along with the elements that exist as a child to the player element.", "", ["element theElement", "[ float xPos = 0", "float yPos = 0", "float zPos = 0", "bool cloneChildren = false ]"], {}).toCompletionItem(),
				new MTAFunction(0, "loadMapData", "", "", ["xmlnode node", "element parent"], {}).toCompletionItem(),
				new MTAFunction(0, "resetMapInfo", "", "", ["[player thePlayer = getRootElement()]"], {}).toCompletionItem(),
				new MTAFunction(0, "textDestroyTextItem", "This function destroys a textitem object.", "", ["textitem theTextitem"], {}).toCompletionItem(),
				new MTAFunction(0, "getPlayerAnnounceValue", "This function retrieves a players ASE announce value under a certain key.", "", ["element thePlayer", "string key"], {}).toCompletionItem(),
				new MTAFunction(0, "getmapname", "This function retrieves the current mapname as set by setMapName.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "removeBan", "This function will remove a specific ban.", "", ["ban theBan [", "player responsibleElement = nil ]"], {}).toCompletionItem(),
				new MTAFunction(0, "removeElementData", "", "", ["element theElement", "string key"], {}).toCompletionItem(),
				new MTAFunction(0, "setElementVisibleTo", "", "", ["element theElement", "element visibleTo", "bool visible"], {}).toCompletionItem(),
				new MTAFunction(0, "isKeyBound", "", "", ["player thePlayer", "string key", "[ string keyState", "function handler ]"], {}).toCompletionItem(),
				new MTAFunction(0, "saveMapData", "", "", ["xmlnode node", "element baseElement [", "bool childrenOnly = false ]"], {}).toCompletionItem(),
				new MTAFunction(0, "acllist", "This function returns a list of all the ACLs.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "getElementSyncer", "This function gets the syncer of an element. The syncer is the player who is in control of the element.", "", ["element theElement"], {}).toCompletionItem(),
				new MTAFunction(0, "getbans", "This function will return a table containing all the bans present in the server's banlist.xml.This example lists every ban when somebody types \"/bans\". WARNING: This will spam chat (for the player that executed the command) if the server has a lot of bans.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "Vector3", "", "", ["[ float x = 0", "float y = 0", "float z = 0 ]"], {}).toCompletionItem(),
				new MTAFunction(0, "setTeamFriendlyFire", "This function sets the friendly fire value for the specified team.", "", ["team theTeam ", "bool friendlyFire"], {}).toCompletionItem(),
				new MTAFunction(0, "textItemSetScale", "This function allows the setting of the scale of a text item.", "", ["textitem theTextitem", "float scale"], {}).toCompletionItem(),
				new MTAFunction(0, "getResourceLoadFailureReason", "This example checks if there's a resource that failed to load, then outputs \"Resource: 'resourceName' failed to load because 'reason'.\" .", "", ["resource theResource"], {}).toCompletionItem(),
				new MTAFunction(0, "getserverport", "This function retrieves the server's port.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "getResourceInfo", "This function retrieves the value of any attribute in a resource info tag.", "", ["resource theResource", "string attribute"], {}).toCompletionItem(),
				new MTAFunction(0, "toggleVehicleRespawn", "This function toggles whether or not the vehicle will be respawned after blown or idle.", "", ["vehicle theVehicle", "bool Respawn"], {}).toCompletionItem(),
				new MTAFunction(0, "removeAccount", "", "", ["account theAccount"], {}).toCompletionItem(),
				new MTAFunction(0, "logIn", "This functions logs the given player in to the given account. You need to provide the password needed to log into that account.", "", ["player thePlayer", "account theAccount", "string thePassword"], {}).toCompletionItem(),
				new MTAFunction(0, "setElementSyncer", "", "", ["element theElement", "player thePlayer"], {}).toCompletionItem(),
				new MTAFunction(0, "getdeadplayers", "This function returns a table of all currently dead players on the server.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "setunbantime", "This function sets a new unban time of a given ban using unix timestamp (seconds since Jan 01 1970).", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "removeRuleValue", "This function removes a set rule value that can be viewed by server browsers.", "", ["string key"], {}).toCompletionItem(),
				new MTAFunction(0, "isElementVisibleTo", "", "", ["element theElement", "element visibleTo"], {}).toCompletionItem(),
				new MTAFunction(0, "setRuleValue", "This function sets a rule value that can be viewed by server browsers.", "", ["string key", "string value"], {}).toCompletionItem(),
				new MTAFunction(0, "setBanNick", "", "", ["ban theBan", "string theNick"], {}).toCompletionItem(),
				new MTAFunction(0, "reloadbans", "This function will reload the server ban list file.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "getPlayerSerial", "This function returns the serial for a specified player.", "", ["player thePlayer"], {}).toCompletionItem(),
				new MTAFunction(0, "getresources", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "setPedFightingStyle", "Changes a ped's fighting style. Most styles only change the 'special attack' which is done using the Aim and Enter keys.", "", ["ped thePed", "int style"], {}).toCompletionItem(),
				new MTAFunction(0, "getResourceLoadTime", "Gets the date and time at which a resource was last loaded in the server.", "", ["resource res"], {}).toCompletionItem(),
				new MTAFunction(0, "getPlayerIdleTime", "This function gets the amount of time in milliseconds that a players position has not changed.This example will kick a player if they don't move for 5 minutes and the resource has access to \"function.kickPlayer\"", "", ["player thePlayer"], {}).toCompletionItem(),
				new MTAFunction(0, "getPedFightingStyle", "", "", ["ped thePed"], {}).toCompletionItem(),
				new MTAFunction(0, "getElementByIndex", "", "", ["string theType", "int index"], {}).toCompletionItem(),
				new MTAFunction(0, "getaliveplayers", "This function returns a table of all the alive players on the server. Opposite function of getDeadPlayers.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "getServerConfigSetting", "This function retrieves server settings which are usually stored in the mtaserver.conf file.", "", ["string name"], {}).toCompletionItem(),
				new MTAFunction(0, "addResourceMap", "", "", ["string filePath", "[ int dimension = 0 ]"], {}).toCompletionItem(),
				new MTAFunction(0, "getPlayerIP", "This function returns a string containing the IP address of the player.", "", ["player thePlayer"], {}).toCompletionItem(),
				new MTAFunction(0, "getPlayerVersion", "This example adds a command that allows players to see their own client version.", "", ["player thePlayer"], {}).toCompletionItem(),
				new MTAFunction(0, "redirectPlayer", "This function redirects the player to a specified server.", "", ["player thePlayer", "string serverIP", "int serverPort", "[ string serverPassword ]"], {}).toCompletionItem(),
				new MTAFunction(0, "getmaxplayers", "This function returns the maximum number of player slots on the server.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "set", "This function is used to save arbitrary data under a certain name on the settings registry.", "", ["string settingName", "var value"], {}).toCompletionItem(),
				new MTAFunction(0, "getserverhttpport", "This function retrieves the server's http port.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "getResourceMapRootElement", "This function retrieves the root element of a certain map in a specified resource.", "", ["resource theResource", "string mapName"], {}).toCompletionItem(),
				new MTAFunction(0, "givePedJetPack", "This function is used to give a ped a jetpack, it won't work if the ped is in a vehicle.", "", ["ped thePed"], {}).toCompletionItem(),
				new MTAFunction(0, "takeWeapon", "This function removes a specified weapon or ammo from a certain player's inventory.", "", ["player thePlayer", "int weaponId [", "int ammo ]"], {}).toCompletionItem(),
				new MTAFunction(0, "getAllElementData", "", "", ["element theElement"], {}).toCompletionItem(),
				new MTAFunction(0, "createResource", "This function creates an new, empty resource. This creates a directory matching the name you specify on disk, then creates an empty meta.xml file with a <meta> element in it.", "", ["string resourceName [", "string organizationalDir ]"], {}).toCompletionItem(),
				new MTAFunction(0, "Vector2", "", "", ["float x = 0", "float y = 0"], {}).toCompletionItem(),
				new MTAFunction(0, "setPedArmor", "This function allows you to set the armor value of a ped.", "", ["ped thePed", "float armor"], {}).toCompletionItem(),
				new MTAFunction(0, "get", "", "", ["string settingName"], {}).toCompletionItem(),
				new MTAFunction(0, "textItemSetText", "Overwrites a previously created text item with the specified text.", "", ["textitem theTextitem", "string text"], {}).toCompletionItem(),
				new MTAFunction(0, "isPlayerMuted", "Use this function to check if a player has been muted.", "", ["player thePlayer"], {}).toCompletionItem(),
				new MTAFunction(0, "setPlayerTeam", "This function adds a player to an existing team. The player will automatically be removed from his current team if he's on one.", "", ["player thePlayer", "team theTeam"], {}).toCompletionItem(),
				new MTAFunction(0, "textItemSetColor", "This function sets the color of a text item.", "", ["textitem theTextItem", "int r", "int g", "int b", "int a"], {}).toCompletionItem(),
				new MTAFunction(0, "textItemGetScale", "This function allows retrieval of the scale or size of a text item.", "", ["textitem theTextitem"], {}).toCompletionItem(),
				new MTAFunction(0, "setPedChoking", "This function can be used to force the ped to do the choking (coughing) animation until he respawns or toggled off using this function. The animation can not be cancelled by a player it's applied to, and he will not loose health.", "", ["ped thePed", "bool choking"], {}).toCompletionItem(),
				new MTAFunction(0, "getservername", "This function retrieves the server's name.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "getElementZoneName", "", "", ["element theElement", "[bool citiesonly=false]"], {}).toCompletionItem(),
				new MTAFunction(0, "getrandomplayer", "This function returns a random player.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "textItemSetPriority", "", "", ["textitem theTextItem", "string priority"], {}).toCompletionItem(),
				new MTAFunction(0, "Vector4", "", "", ["float x = 0", "float y = 0", "float z = 0", "float w = 0"], {}).toCompletionItem(),
				new MTAFunction(0, "textItemSetPosition", "This function allows the setting of the position of a text item.", "", ["textitem theTextItem", "float x", "float y"], {}).toCompletionItem(),
				new MTAFunction(0, "setPedGravity", "This function sets the gravity level of a ped.", "", ["ped thePed", "float gravity"], {}).toCompletionItem(),
				new MTAFunction(0, "getModuleInfo", "This function returns information about the specified module.", "", ["string moduleName"], {}).toCompletionItem(),
				new MTAFunction(0, "reloadPedWeapon", "This function makes a pedestrian reload their weapon.", "", ["ped thePed"], {}).toCompletionItem(),
				new MTAFunction(0, "setTeamName", "This function is used to set a team's name.", "", ["team theTeam", "string newName"], {}).toCompletionItem(),
				new MTAFunction(0, "removePedJetPack", "", "", ["ped thePed"], {}).toCompletionItem(),
				new MTAFunction(0, "getplayercount", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "resetVehicleIdleTime", "", "", ["vehicle theVehicle"], {}).toCompletionItem(),
				new MTAFunction(0, "addVehicleSirens", "This function adds sirens to a vehicle.", "", ["vehicle theVehicle", "int sirenCount", "int sirenType", "[bool 360flag = false", "bool checkLosFlag = true", "bool useRandomiser flag = true", "bool silentFlag = false"], {}).toCompletionItem(),
				new MTAFunction(0, "Matrix", "", "", ["Vector3 position[", "Vector3 rotation]"], {}).toCompletionItem(),
				new MTAFunction(0, "getloadedmodules", "This function returns all the currently loaded modules of the server.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "getResourceACLRequests", "This function retrieves the ACL request section from the meta.xml file of the given resource.", "", ["resource theResource"], {}).toCompletionItem(),
				new MTAFunction(0, "executesqlquery", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "callRemote", "This function allows you to call functions that have been exported with HTTP access by other MTA servers. The calls are asynchronous so you do not get an immediate result from the call, instead a callback function you specify is called when the call returns.", "", ["string host[", "string queueName = \"default\" ][", "int connectionAttempts = 10", "int connectTimeout = 10000 ]", "string resourceName", "string functionName", "callback callbackFunction", "[ arguments... ]"], {}).toCompletionItem(),
				new MTAFunction(0, "getplayeracinfo", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "getResourceOrganizationalPath", "", "", ["resource theResource"], {}).toCompletionItem(),
				new MTAFunction(0, "getResourceLastStartTime", "Used to check the last starting time and date of a resource", "", ["resource theResource"], {}).toCompletionItem(),
				new MTAFunction(0, "takeAllWeapons", "This function removes every weapons from a specified ped, rendering it unarmed.", "", ["ped thePed"], {}).toCompletionItem(),
				new MTAFunction(0, "setjetpackweaponenabled", "This function sets a weapon usable while using the Jetpack.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(0, "respawnVehicle", "", "", ["vehicle theVehicle"], {}).toCompletionItem(),
				new MTAFunction(0, "giveWeapon", "giveWeapon gives a specified weapon to a certain player or ped. There is an optional argument to specify ammunition. For example, a melee weapon doesn't need an ammo argument.", "", ["ped thePlayer", "int weapon [", "int ammo=30", "bool setAsCurrent=false ]"], {}).toCompletionItem(),
				new MTAFunction(0, "removeVehicleSirens", "This function removes sirens from a vehicle.", "", ["vehicle theVehicle"], {}).toCompletionItem(),
				new MTAFunction(0, "resetVehicleExplosionTime", "", "", ["vehicle theVehicle"], {}).toCompletionItem(),
				new MTAFunction(0, "addResourceConfig", "", "", ["string filePath", "[ string filetype = \"server\" ]"], {}).toCompletionItem(),
				new MTAFunction(0, "deleteResource", "This function deletes a resource from the MTA memory and moves it to the /resources-cache/trash/ directory.", "", ["string resourceName"], {}).toCompletionItem(),
				new MTAFunction(0, "spawnVehicle", "With this feature, we spawn vehicle", "", ["vehicle theVehicle", "float x", "float y", "float z [", "float rx", "float ry", "float rz ]"], {}).toCompletionItem(),
				new MTAFunction(0, "getvehiclesloddistance", "Returns the distance of vehicles LOD.", "", ["??"], {}).toCompletionItem(),

				//**************** CLIENT FUNCTIONS *******************//

				new MTAFunction(1, "ismtawindowactive", "This function returns whether any system windows that take focus are active. This includes:", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "ismainmenuactive", "This function returns whether the user is in the mainmenu or not.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "guiSetText", "", "", ["element guiElement", "string text"], {}).toCompletionItem(),
				new MTAFunction(1, "isdebugviewactive", "This function returns whether the ingame debug window is visible or not. This is the debugwindow visible using the \"debugscript < level > \" command.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "istransferboxactive", "This function returns whether the file downloading dialog box is active or not. This appears when a resource is started and the client doesn't have all the files that resource requires the client to have.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "setDebugViewActive", "", "", ["bool enabled"], {}).toCompletionItem(),
				new MTAFunction(1, "setcursorposition", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "getSFXStatus", "This function checks if a big sound container is available to use or not.", "", ["string audioContainer"], {}).toCompletionItem(),
				new MTAFunction(1, "getSoundMetaTags", "Used to get the meta tags attached to a sound. These provide information about the sound, for instance the title or the artist.", "", ["element sound"], {}).toCompletionItem(),
				new MTAFunction(1, "getRadioChannelName", "This function gets the given radio channel name.", "", ["int id"], {}).toCompletionItem(),
				new MTAFunction(1, "int getSoundLevelData", "This function gets the left/right level from a sound element.If the element is a player, this function will use the players voice.", "", ["element theSound"], {}).toCompletionItem(),
				new MTAFunction(1, "getSoundBPM", "This function gets the beats per minute of a specific sound element.", "", ["element sound"], {}).toCompletionItem(),
				new MTAFunction(1, "getSoundEffects", "Returns the states of all effects of a sound.", "", ["element sound"], {}).toCompletionItem(),
				new MTAFunction(1, "getSoundLength", "This function is used to return the playback length of the specified sound element.If the element is a player, this function will use the players voice.", "", ["element theSound"], {}).toCompletionItem(),
				new MTAFunction(1, "setSearchLightStartPosition", "", "", ["searchlight theSearchLight", "float startX", "float startY", "float startZ"], {}).toCompletionItem(),
				new MTAFunction(1, "getSoundFFTData", "This function gets the fast fourier transform data for an audio stream which is a table of floats representing the current audio frame.This allows things like visualisations.", "", ["element sound", "int iSamples [", "int iBands = 0 ]"], {}).toCompletionItem(),
				new MTAFunction(1, "setAnalogControlState", "This sets the analog control state of a control for the local player.", "", ["string controlName [", "float state]"], {}).toCompletionItem(),
				new MTAFunction(1, "getcursorposition", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "getSoundMaxDistance", "Gets a custom sound max distance at which the sound stops.", "", ["element sound"], {}).toCompletionItem(),
				new MTAFunction(1, "getSoundPosition", "This function is used to return the current seek position of the specified sound element.If the element is a player, this function will use the players voice.", "", ["element theSound"], {}).toCompletionItem(),
				new MTAFunction(1, "getSoundPan", "This function is used to get the pan level of the specified sound element.", "", ["element theSound"], {}).toCompletionItem(),
				new MTAFunction(1, "givePedWeapon", "This function gives the specified weapon to the specified ped. This function can't be used on players, use giveWeapon for that.", "", ["ped thePed", "int weapon [", "int ammo=30", "bool setAsCurrent=false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "getradiochannel", "This function retrieves the ID of the currently active radio channel.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "getSoundMinDistance", "Gets a custom sound Minimum distance at which the sound stops getting louder.", "", ["element sound"], {}).toCompletionItem(),
				new MTAFunction(1, "setSoundEffectEnabled", "Used to enable or disable specific sound effects.Use a player element to control a players voice with this function.", "", ["element sound", "string effectName", "bool bEnable"], {}).toCompletionItem(),
				new MTAFunction(1, "setSoundMinDistance", "Sets a custom sound Minimum distance at which the sound stops getting louder.", "", ["element sound", "int distance"], {}).toCompletionItem(),
				new MTAFunction(1, "dxCreateFont", "", "", ["string filepath[", "int size=9", "bool bold=false", "string quality=\"proof\" ]"], {}).toCompletionItem(),
				new MTAFunction(1, "fxAddBlood", "This example creates blood effects when a player gets shot.", "", ["float posX", "float posY", "float posZ", "float dirX", "float dirY", "float dirZ", "[int count=1", "float brightness=1.0]"], {}).toCompletionItem(),
				new MTAFunction(1, "int [, int] dxGetMaterialSize", "", "", ["element material"], {}).toCompletionItem(),
				new MTAFunction(1, "setSoundPan", "", "", ["element theSound", "float pan"], {}).toCompletionItem(),
				new MTAFunction(1, "setSoundPaused", "This function is used to either pause or unpause the playback of the specified sound element.", "", ["element theSound", "bool paused"], {}).toCompletionItem(),
				new MTAFunction(1, "playSFX", "This function plays a sound from GTA's big sound containers.", "", ["string containerName", "int bankId", "int soundId [", "bool looped = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "getSoundVolume", "This function is used to return the volume level of the specified sound element.If the element is a player, this function will use the players voice.", "", ["element theSound"], {}).toCompletionItem(),
				new MTAFunction(1, "dxDrawMaterialSectionLine3D", "This function draws a textured 3D line between two points in the 3D world - rendered for one frame. This should be used in conjunction with onClientPreRender in order to display continuously.", "", ["float startX", "float startY", "float startZ", "float endX", "float endY", "float endZ", "float u", "float v", "float usize", "float vsize", "element material", "int width", "[ int color = white", "float faceTowardX", "float faceTowardY", "float faceTowardZ ]"], {}).toCompletionItem(),
				new MTAFunction(1, "string, string, string getPedTask", "", "", ["ped thePed", "string priority", "int taskType"], {}).toCompletionItem(),
				new MTAFunction(1, "setEffectDensity", "This function sets the density of a specified effect.", "", ["effect theEffect", "float density"], {}).toCompletionItem(),
				new MTAFunction(1, "dxSetBlendMode", "", "", ["string blendMode"], {}).toCompletionItem(),
				new MTAFunction(1, "getpedcamerarotation", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "getSoundWaveData", "This function gets the wave form data for an audio stream which is a table of floats representing the current audio frame as a wave.This allows things like visualisations.", "", ["element sound", "int iSamples"], {}).toCompletionItem(),
				new MTAFunction(1, "playSound3D", "Creates a sound element in the GTA world and plays it immediately after creation for the local player. setElementPosition can be used to move the sound element around after it has been created. Remember to use setElementDimension after creating the sound to play it outside of dimension 0.", "", ["string soundPath", "float x", "float y", "float z", "[ bool looped = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "getcamera", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "focusBrowser", "This function will attempt to focus the browser or unfocus all browsers. The browser that is focused will retrieve keyboard input.This example creates browser and focus it", "", ["browser webBrowser"], {}).toCompletionItem(),
				new MTAFunction(1, "setSoundSpeed", "This function can be used to change the playback speed of the specified sound element.", "", ["element theSound", "float speed"], {}).toCompletionItem(),
				new MTAFunction(1, "ispedtargetingmarkerenabled", "This example will toggle the targeting markers with the command /togtargetmarkers.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "createBrowser", "This function creates a new web browser element.", "", ["int width", "int height", "bool isLocal [", "bool transparent = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "fxAddWaterSplash", "This example will create a Water Splash at the position of the bullet impact whenever you shoot.", "", ["float posX", "float posY", "float posZ"], {}).toCompletionItem(),
				new MTAFunction(1, "guigetinputmode", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "isPedDoingTask", "This function checks if the specified ped is carrying out a certain task.", "", ["ped thePed", "string taskName"], {}).toCompletionItem(),
				new MTAFunction(1, "setPedCanBeKnockedOffBike", "This function controls if a ped can fall of his bike by accident - namely by banging into a wall.", "", ["ped thePed", "bool canBeKnockedOffBike"], {}).toCompletionItem(),
				new MTAFunction(1, "setEffectSpeed", "This function sets the speed of a specified effect.", "", ["effect theEffect", "float speed"], {}).toCompletionItem(),
				new MTAFunction(1, "executeBrowserJavascript", "This function executes a Javascript string to the specified browser. Works only with local browsers.", "", ["browser webBrowser", "string jsCode"], {}).toCompletionItem(),
				new MTAFunction(1, "setSoundPosition", "This function is used to change the seek position of the specified sound element.Use a player element to control a players voice with this function.", "", ["element theSound", "float pos"], {}).toCompletionItem(),
				new MTAFunction(1, "playSound", "Creates a sound element and plays it immediately after creation for the local player. Note: The only supported audio formats are MP3, WAV, OGG, RIFF, MOD, XM, IT, S3M and PLS(e.g. Webstream).", "", ["string soundPath", "[ bool looped = false", "bool throttled = true ]"], {}).toCompletionItem(),
				new MTAFunction(1, "getsoundproperties", "This function gets the properties of a specific sound.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "playSFX3D", "This function plays a sound in the GTA world from GTA's big sound containers.", "", ["string containerName", "int bankId", "int soundId", "float x", "float y", "float z [", "bool looped = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "setSoundPanningEnabled", "This function toggles the panning of a sound (hearing it closer to the left or right side of the speakers due to the camera position). By default a sound has its panning enabled.", "", ["element sound", "bool enable"], {}).toCompletionItem(),
				new MTAFunction(1, "isSoundPanningEnabled", "This function checks whether panning is enabled in a sound element or not.", "", ["element theSound"], {}).toCompletionItem(),
				new MTAFunction(1, "setSoundVolume", "This function is used to change the volume level of the specified sound element.Use a player element to control a players voice with this function.", "", ["element theSound", "float volume"], {}).toCompletionItem(),
				new MTAFunction(1, "setRadioChannel", "This function sets the heard radio channel, even while not in a vehicle.", "", ["int ID"], {}).toCompletionItem(),
				new MTAFunction(1, "setSoundMaxDistance", "Sets a custom sound max distance at which the sound stops.", "", ["element sound", "int distance"], {}).toCompletionItem(),
				new MTAFunction(1, "setsoundproperties", "This function edit's the properties of a specific sound.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "getSoundSpeed", "This function is used to return the playback speed of the specified sound element.", "", ["element theSound"], {}).toCompletionItem(),
				new MTAFunction(1, "stopSound", "Stops the sound playback for specified sound element. The sound element is also destroyed.", "", ["element theSound"], {}).toCompletionItem(),
				new MTAFunction(1, "getKeyState", "This function determines if a certain key is pressed or not.", "", ["string keyName"], {}).toCompletionItem(),
				new MTAFunction(1, "guiSetInputEnabled", "", "", ["bool enabled"], {}).toCompletionItem(),
				new MTAFunction(1, "dxDrawLine", "This function draws a 2D line across the screen - rendered for one frame. This should be used in conjunction with onClientRender in order to display continuously.", "", ["int startX", "int startY", "int endX", "int endY", "int color", "[float width=1", "bool postGUI=false]"], {}).toCompletionItem(),
				new MTAFunction(1, "dxDrawText", "Draws a string of text on the screen for one frame. In order for the text to stay visible continuously, you need to call this function with the same parameters on each frame update (see onClientRender).", "", ["string text", "float left", "float top [", "float right=left", "float bottom=top", "int color=white", "float scale=1", "mixed font=\"default\"", "string alignX=\"left\"", "string alignY=\"top\"", "bool clip=false", "bool wordBreak=false", "bool postGUI=false", "bool colorCoded=false", "bool subPixelPositioning=false", "float fRotation=0", "float fRotationCenterX=0", "float fRotationCenterY=0 ]"], {}).toCompletionItem(),
				new MTAFunction(1, "fxAddBulletSplash", "This example will add a Bullet Splash Effect next to your player when typing /bsplash in the Chatbox.", "", ["float posX", "float posY", "float posZ"], {}).toCompletionItem(),
				new MTAFunction(1, "guiCreateFont", "", "", ["string filepath[", "int size=9 ]"], {}).toCompletionItem(),
				new MTAFunction(1, "guiSetVisible", "", "", ["element guiElement", "bool state"], {}).toCompletionItem(),
				new MTAFunction(1, "getEffectDensity", "This function gets the density of certain effect.", "", ["effect theEffect"], {}).toCompletionItem(),
				new MTAFunction(1, "engineRestoreCOL", "This function restores the original collision model of the given model ID. Reverses the effect of engineReplaceCOL.Client-Side example for restoring object collision with default one.Server-side example function for triggering the restore.", "", ["int modelID"], {}).toCompletionItem(),
				new MTAFunction(1, "guiSetProperty", "", "", ["element guiElement", "string property", "string value"], {}).toCompletionItem(),
				new MTAFunction(1, "fxAddGlass", "", "", ["float posX", "float posY", "float posZ", "[int colorR=255", "int colorG=0", "int colorB=0", "int colorA=255", "float scale=1.0", "int count=1]"], {}).toCompletionItem(),
				new MTAFunction(1, "dxSetTexturePixels", "", "", ["[ int surfaceIndex = 0", "] element texture", "string pixels [", "int x = 0", "int y = 0", "int width = 0", "int height = 0 ]"], {}).toCompletionItem(),
				new MTAFunction(1, "isSoundPaused", "This function is used to return the current pause state of the specified sound element.", "", ["element theSound"], {}).toCompletionItem(),
				new MTAFunction(1, "setLightDirection", "", "", ["light theLight", "float x", "float y", "float z"], {}).toCompletionItem(),
				new MTAFunction(1, "dxSetRenderTarget", "", "", ["[ element renderTarget", "bool clear = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "string dxCreateShader", "", "", ["string filepath [", "float priority = 0", "float maxDistance = 0", "bool layered = false", "string elementTypes = \"world, vehicle, object, other\" ]"], {}).toCompletionItem(),
				new MTAFunction(1, "dxDrawMaterialLine3D", "This function draws a textured 3D line between two points in the 3D world - rendered for one frame. This should be used in conjunction with onClientPreRender in order to display continuously.Draws an Image ( \"test.png\" Download : test.png ) from the Position 0,0,3 to 0,0,15", "", ["float startX", "float startY", "float startZ", "float endX", "float endY", "float endZ", "element material", "float width", "[ int color = white", "float faceTowardX", "float faceTowardY", "float faceTowardZ ]"], {}).toCompletionItem(),
				new MTAFunction(1, "dxSetShaderTessellation", "", "", ["element theShader", "int tessellationX", "int tessellationY"], {}).toCompletionItem(),
				new MTAFunction(1, "fxAddDebris", "This example will create a Debris Effect next to you when typing /debris in the Chatbox.", "", ["float posX", "float posY", "float posZ", "[int colorR=255", "int colorG=0", "int colorB=0", "int colorA=255", "float scale=1.0", "int count=1]"], {}).toCompletionItem(),
				new MTAFunction(1, "guiSetEnabled", "", "", ["element guiElement", "bool enabled"], {}).toCompletionItem(),
				new MTAFunction(1, "float guiGetPosition", "This function allows retrieval of a GUI element's current position, relative to its parent.", "", ["element guiElement", "bool relative"], {}).toCompletionItem(),
				new MTAFunction(1, "engineSetAsynchronousLoading", "", "", ["bool enable", "bool force"], {}).toCompletionItem(),
				new MTAFunction(1, "engineGetModelLODDistance", "", "", ["int model"], {}).toCompletionItem(),
				new MTAFunction(1, "fxAddGunshot", "This example adds a gunshot with sparks in front of your face.", "", ["float posX", "float posY", "float posZ", "float dirX", "float dirY", "float dirZ", "[bool includeSparks=true]"], {}).toCompletionItem(),
				new MTAFunction(1, "dxUpdateScreenSource", "", "", ["element screenSource [", "bool resampleNow = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "isElementWaitingForGroundToLoad", "The next code snippet outputs a message when a vehicle respawns far away from players, above an object.", "", ["element theElement"], {}).toCompletionItem(),
				new MTAFunction(1, "createFire", "", "", ["float x", "float y", "float z [", "float size = 1.8 ]"], {}).toCompletionItem(),
				new MTAFunction(1, "dxGetTextWidth", "This function retrieves the theoretical width of a certain piece of text, if it were to be drawn using dxDrawText.This will show you the width of a message in a normal chatbox sent by a player", "", ["string text", "[float scale=1", "mixed font=\"default \"", "bool bColorCoded=false]"], {}).toCompletionItem(),
				new MTAFunction(1, "float float getPedTargetEnd", "This function allows retrieval of the position where a ped's target range ends, when he is aiming with a weapon.", "", ["ped targetingPed"], {}).toCompletionItem(),
				new MTAFunction(1, "guiGetAlpha", "", "", ["element guiElement"], {}).toCompletionItem(),
				new MTAFunction(1, "int, int getLightColor", "", "", ["light theLight"], {}).toCompletionItem(),
				new MTAFunction(1, "Vector4", "", "", ["float x = 0", "float y = 0", "float z = 0", "float w = 0"], {}).toCompletionItem(),
				new MTAFunction(1, "getGroundPosition", "This function gets the Z level of the highest ground below a point.", "", ["float x", "float y", "float z"], {}).toCompletionItem(),
				new MTAFunction(1, "dxSetShaderValue", "", "", ["element theShader", "string parameterName", "mixed value"], {}).toCompletionItem(),
				new MTAFunction(1, "dxgetpixelcolor", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "dxCreateScreenSource", "", "", ["int width", "int height"], {}).toCompletionItem(),
				new MTAFunction(1, "dxCreateRenderTarget", "", "", ["int width", "int height [", "bool withAlpha = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "Matrix", "", "", ["Vector3 position[", "Vector3 rotation]"], {}).toCompletionItem(),
				new MTAFunction(1, "float, float getGaragePosition", "This function outputs X, Y and Z position of given garage.This element has to create a blip at the nearest garage and removes it in 10 seconds.", "", ["int garageID"], {}).toCompletionItem(),
				new MTAFunction(1, "float guiGetSize", "", "", ["element theElement", "bool relative"], {}).toCompletionItem(),
				new MTAFunction(1, "guigetinputenabled", "This function checks whether user input is focused on the GUI or the game.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "guiGetVisible", "", "", ["element guiElement"], {}).toCompletionItem(),
				new MTAFunction(1, "dxGetFontHeight", "This function retrieves the theoretical height of a certain piece of text, if it were to be drawn using dxDrawText.", "", ["[float scale=1", "mixed font=\"default \"]"], {}).toCompletionItem(),
				new MTAFunction(1, "int dxGetPixelsSize", "", "", ["string pixels"], {}).toCompletionItem(),
				new MTAFunction(1, "dxSetTestMode", "", "", ["string testMode"], {}).toCompletionItem(),
				new MTAFunction(1, "setLightRadius", "", "", ["Light theLight", "float radius"], {}).toCompletionItem(),
				new MTAFunction(1, "element guiGetFont", "", "", ["element guiElement"], {}).toCompletionItem(),
				new MTAFunction(1, "getSearchLightStartPosition", "", "", ["searchlight theSearchLight"], {}).toCompletionItem(),
				new MTAFunction(1, "fxAddWood", "This example will create a Wood Effect next to you when typing /woodfx in the Chatbox.", "", ["float posX", "float posY", "float posZ", "float dirX", "float dirY", "float dirZ", "[int count=1", "float brightness=1.0]"], {}).toCompletionItem(),
				new MTAFunction(1, "triggerServerEvent", "This function triggers an event previously registered on the server. This is the primary means of passing information between the client and the server. Servers have a similar triggerClientEvent function that can do the reverse. You can treat this function as if it was an asynchronous function call, using triggerClientEvent to pass back any returned information if necessary.", "", ["string event", "element theElement", "[arguments...]"], {}).toCompletionItem(),
				new MTAFunction(1, "dxSetShaderTransform", "", "", ["element theShader", "float rotationX", "float rotationY", "float rotationZ", "[ float rotationCenterOffsetX = 0", "float rotationCenterOffsetY = 0", "float rotationCenterOffsetZ = 0", "bool bRotationCenterOffsetOriginIsScreen = false", "float perspectiveCenterOffsetX = 0", "float perspectiveCenterOffsetY = 0", "bool bPerspectiveCenterOffsetOriginIsScreen = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "createEffect", "Creates an effect on specified position.", "", ["string name", "float x", "float y", "float z [", "float rX", "float rY", "float rZ", "float drawDistance = 0", "soundEnabled = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "guiSetInputMode", "", "", ["string mode"], {}).toCompletionItem(),
				new MTAFunction(1, "float, float getGarageSize", "This function outputs the size of garage.This example adds the command /garagesize <garage ID>", "", ["int garageID"], {}).toCompletionItem(),
				new MTAFunction(1, "guiSetAlpha", "", "", ["element guielement", "float alpha"], {}).toCompletionItem(),
				new MTAFunction(1, "guiBringToFront", "", "", ["element guiElement"], {}).toCompletionItem(),
				new MTAFunction(1, "fxAddBulletImpact", "This example will create a Bullet Impact Effect on the position of the bullet impact.", "", ["float posX", "float posY", "float posZ", "float dirX", "float dirY", "float dirZ", "[int smokeSize=1", "int sparkCount=1", "float smokeIntensity=1.0]"], {}).toCompletionItem(),
				new MTAFunction(1, "dxDrawLine3D", "This function draws a 3D line between two points in the 3D world - rendered for one frame. This should be used in conjunction with onClientRender in order to display continuously.", "", ["float startX", "float startY", "float startZ", "float endX", "float endY", "float endZ[", "int color = white", "int width = 1", "bool postGUI = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "dxDrawImage", "", "", ["float posX", "float posY", "float width", "float height", "mixed image", "[ float rotation = 0", "float rotationCenterOffsetX = 0", "float rotationCenterOffsetY = 0", "int color = tocolor(255,255,255,255)", "bool postGUI = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "fxAddTankFire", "This example will create a Tank Fire Effect at your weapon's muzzle position", "", ["float posX", "float posY", "float posZ", "float dirX", "float dirY", "float dirZ"], {}).toCompletionItem(),
				new MTAFunction(1, "dxSetAspectRatioAdjustmentEnabled", "", "", ["bool bEnabled [", "float sourceRatio = 4/3 ]"], {}).toCompletionItem(),
				new MTAFunction(1, "fxAddWaterHydrant", "", "", ["float posX", "float posY", "float posZ"], {}).toCompletionItem(),
				new MTAFunction(1, "dxDrawRectangle", "This function draws a 2D rectangle across the screen - rendered for one frame. This should be used in conjunction with onClientRender in order to display continuously. Example of MOTD (message of the day), made using DxDrawText, -Line and -Rectangle.", "", ["float startX", "float startY", "float width", "float height [", "int color = white", "bool postGUI = false", "bool subPixelPositioning = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "dxGetPixelsFormat", "", "", ["string pixels"], {}).toCompletionItem(),
				new MTAFunction(1, "engineLoadCOL", "", "", ["string col_file / string raw_data"], {}).toCompletionItem(),
				new MTAFunction(1, "Vector2", "", "", ["float x = 0", "float y = 0"], {}).toCompletionItem(),
				new MTAFunction(1, "setObjectBreakable", "This function sets an object to be breakable/unbreakable.", "", ["object theObject", "bool breakable"], {}).toCompletionItem(),
				new MTAFunction(1, "getPedAnalogControlState", "", "", ["ped thePed", "string controlName"], {}).toCompletionItem(),
				new MTAFunction(1, "setObjectMass", "This function sets the mass of a specified object. Changing the mass leads to a different movement behavior for especially dynamic objects.", "", ["object theObject", "float mass"], {}).toCompletionItem(),
				new MTAFunction(1, "float float getPedTargetCollision", "This function allows retrieval of where a ped's target is blocked. It will only be blocked if there is an obstacle within a ped's target range.", "", ["ped targetingPed"], {}).toCompletionItem(),
				new MTAFunction(1, "setPedTargetingMarkerEnabled", "", "", ["bool enabled"], {}).toCompletionItem(),
				new MTAFunction(1, "fxAddTyreBurst", "This example will create a Tyre Burst Effect next to you when typing /tyreburst in the Chatbox.", "", ["float posX", "float posY", "float posZ", "float dirX", "float dirY", "float dirZ"], {}).toCompletionItem(),
				new MTAFunction(1, "createSearchLight", "This function creates a searchlight. A searchlight is a spotlight which looks like the one available in the Police Maverick.", "", ["float startX", "float startY", "float startZ", "float endX", "float endY", "float endZ", "float startRadius", "float endRadius [", "bool renderSpot = true ]"], {}).toCompletionItem(),
				new MTAFunction(1, "setPedOxygenLevel", "This function allows you to set the oxygen level of a ped.", "", ["ped thePed", "float oxygen"], {}).toCompletionItem(),
				new MTAFunction(1, "breakObject", "This function breaks a specific object.", "", ["object theObject"], {}).toCompletionItem(),
				new MTAFunction(1, "setSearchLightEndPosition", "", "", ["searchlight theSearchLight", "float endX", "float endY", "float endZ"], {}).toCompletionItem(),
				new MTAFunction(1, "getinteriorsoundsenabled", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "dxGetTexturePixels", "", "", ["[ int surfaceIndex = 0", "] element texture [", "int x = 0", "int y = 0", "int width = 0", "int height = 0 ]"], {}).toCompletionItem(),
				new MTAFunction(1, "engineReplaceCOL", "Client-Side example for replacing object collision with custom one.Server-side example function for triggering the replace.", "", ["col theCol", "int modelID"], {}).toCompletionItem(),
				new MTAFunction(1, "engineGetModelNameFromID", "", "", ["int modelID"], {}).toCompletionItem(),
				new MTAFunction(1, "isElementSyncer", "This function checks whether an element is synced by the local player or not. Accepted elements are peds and vehicles.This example draws a string above peds synced by local player in 50m proximity", "", ["element theElement"], {}).toCompletionItem(),
				new MTAFunction(1, "dxConvertPixels", "", "", ["string pixels", "string newFormat [", "int quality = 80 ]"], {}).toCompletionItem(),
				new MTAFunction(1, "fxAddSparks", "This example will add Fire Bins to all locations added in the table.", "", ["float posX", "float posY", "float posZ", "float dirX", "float dirY", "float dirZ", "[float force=1", "int count=1", "float acrossLineX=0", "float acrossLineY=0", "float acrossLineZ=0", "bool blur=false", "float spread=1", "float life=1]"], {}).toCompletionItem(),
				new MTAFunction(1, "guiSetSize", "", "", ["element guiElement", "float width", "float height", "bool relative"], {}).toCompletionItem(),
				new MTAFunction(1, "dxSetPixelColor", "This example creates a 64x64 texture with random pixel colors, and draw it on the screen.", "", ["string pixels", "int x", "int y", "int r", "int g", "int b [", "int a = 255 ]"], {}).toCompletionItem(),
				new MTAFunction(1, "fxAddFootSplash", "This example will create a Foot Splash at the position of the bullet impact whenever you shoot.", "", ["float posX", "float posY", "float posZ"], {}).toCompletionItem(),
				new MTAFunction(1, "isElementStreamable", "", "", ["element theElement"], {}).toCompletionItem(),
				new MTAFunction(1, "getProjectileCreator", "This function returns the creator of the specified projectile.This example will output a message in the chatbox saying who createdthe projectile.", "", ["projectile theProjectile"], {}).toCompletionItem(),
				new MTAFunction(1, "setProjectileCounter", "Will change the projectile counter timer which depending on the projectile type will do different things:With this example you can use /setbombtime to set a delay duration of a projectile explosion.", "", ["projectile projectile", "int timeToDetonate"], {}).toCompletionItem(),
				new MTAFunction(1, "getBoundKeys", "Returns a list of key names that are bound to the specified game control or console command.", "", ["string command/control"], {}).toCompletionItem(),
				new MTAFunction(1, "canPedBeKnockedOffBike", "This function checks if the given ped can fall off bikes.", "", ["ped thePed"], {}).toCompletionItem(),
				new MTAFunction(1, "Vector3", "", "", ["[ float x = 0", "float y = 0", "float z = 0 ]"], {}).toCompletionItem(),
				new MTAFunction(1, "isplayerhudcomponentvisible", "This function can be used to check whether an hud component is visable or not.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "isplayermapvisible", "This function checks if the local player has their map showing", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "setPedAimTarget", "This function allows you to set a ped's aim target to a specific point. If a ped is within a certain range defined by getPedTargetStart and getPedTargetEnd he will be targeted and shot.", "", ["ped thePed", "float x", "float y", "float z"], {}).toCompletionItem(),
				new MTAFunction(1, "guigetcursortype", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "getChatboxLayout", "Returns information about how the chatbox looks.", "", ["[ string CVar ]"], {}).toCompletionItem(),
				new MTAFunction(1, "setPedControlState", "This function makes a ped press or release a certain control. It doesn't work with the local player, so use setControlState instead.", "", ["ped thePed", "string control", "bool state"], {}).toCompletionItem(),
				new MTAFunction(1, "getObjectMass", "This function returns the mass of a specified object.", "", ["object theObject"], {}).toCompletionItem(),
				new MTAFunction(1, "setpedfootbloodenabled", "This function makes a players foot prints bloody.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "setPedCameraRotation", "", "", ["ped thePed", "float cameraRotation"], {}).toCompletionItem(),
				new MTAFunction(1, "getElementDistanceFromCentreOfMassToBaseOfModel", "This function is used to retrieve the distance between a element's centre of mass to the base of the model. This can be used to calculate the position the element has to be set to, to have it on ground level.", "", ["element theElement"], {}).toCompletionItem(),
				new MTAFunction(1, "float float getSearchLightEndPosition", "", "", ["searchlight theSearchLight"], {}).toCompletionItem(),
				new MTAFunction(1, "engineRemoveShaderFromWorldTexture", "", "", ["element shader", "string textureName [", "element targetElement = nil ]"], {}).toCompletionItem(),
				new MTAFunction(1, "getSearchLightEndRadius", "", "", ["searchlight theSearchLight"], {}).toCompletionItem(),
				new MTAFunction(1, "float, float, float getGarageBoundingBox", "This function outputs the bounding box of a garage. Checks if the player is inside the bounding box of the garage and outputs the result to the chat", "", ["int garageID"], {}).toCompletionItem(),
				new MTAFunction(1, "float float getPedTargetStart", "This function allows retrieval of the position a ped's target range begins, when he is aiming with a weapon.", "", ["ped targetingPed"], {}).toCompletionItem(),
				new MTAFunction(1, "setPedLookAt", "", "", ["ped thePed", "float x", "float y", "float z [", "int time = 3000 [", "int blend = 1000 ]", "element target = nil ]"], {}).toCompletionItem(),
				new MTAFunction(1, "string getPedVoice", "", "", ["ped thePed"], {}).toCompletionItem(),
				new MTAFunction(1, "setElementMatrix", "", "", ["element theElement", "table theMatrix"], {}).toCompletionItem(),
				new MTAFunction(1, "getlocalplayer", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "float, float getLightDirection", "", "", ["light theLight"], {}).toCompletionItem(),
				new MTAFunction(1, "engineReplaceModel", "Client-side example for replacing vehicle model and texture with custom ones.Server-side example function for triggering the replace.Client-side example for replacing weapons with custom mods.Client-Side example for replacing object collision, texture and model with custom ones.Server-side example function for triggering the replace.", "", ["dff theModel", "int modelID [", "bool alphaTransparency = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "isElementStreamedIn", "This function checks whether an element is currently streamed in (not virtualized) and are actual GTA objects in the world. You can force an element to be streamed in using setElementStreamable.", "", ["element theElement"], {}).toCompletionItem(),
				new MTAFunction(1, "setElementCollidableWith", "", "", ["element theElement", "element withElement", "bool enabled"], {}).toCompletionItem(),
				new MTAFunction(1, "enginegetmodeltexturenames", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "getElementRadius", "", "", ["element theElement"], {}).toCompletionItem(),
				new MTAFunction(1, "engineImportTXD", "", "", ["txd texture", "int model_id"], {}).toCompletionItem(),
				new MTAFunction(1, "triggerLatentServerEvent", "This function is the same as triggerServerEvent except the transmission rate of the data contained in the arguments can be limited and other network traffic is not blocked while the data is being transferred.", "", ["string event", "[int bandwidth=5000", "bool persist=false,] element theElement", "[arguments...]"], {}).toCompletionItem(),
				new MTAFunction(1, "engineLoadTXD", "", "", ["string txd_file / string raw_data [", "bool filteringEnabled = true ]"], {}).toCompletionItem(),
				new MTAFunction(1, "getElementBoundingBox", "", "", ["element theElement"], {}).toCompletionItem(),
				new MTAFunction(1, "setLightColor", "This function sets the color for a light element.", "", ["light theLight", "float r", "float g", "float b"], {}).toCompletionItem(),
				new MTAFunction(1, "isconsoleactive", "This function returns whether the ingame console window is visible or not.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "engineLoadDFF", "", "", ["string dff_file / string raw_data"], {}).toCompletionItem(),
				new MTAFunction(1, "guiSetPosition", "", "", ["element theElement", "float x", "float y", "bool relative"], {}).toCompletionItem(),
				new MTAFunction(1, "getPedMoveState", "Example 1: This example shows how you can output a players current movestate.", "", ["ped thePed"], {}).toCompletionItem(),
				new MTAFunction(1, "createLight", "", "", ["int lightType", "float posX", "float posY", "float posZ [", "float radius = 3", "int r = 255", "int g = 0", "int b = 0", "float dirX = 0", "float dirY = 0", "float dirZ = 0", "bool createsShadow = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "getPedSimplestTask", "This function is used to get the name of a specified ped's current simplest task.", "", ["ped thePed"], {}).toCompletionItem(),
				new MTAFunction(1, "guigetscreensize", "This function retrieves the local screen size according to the resolution they are using.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "guiSetFont", "", "", ["element guiElement", "mixed font"], {}).toCompletionItem(),
				new MTAFunction(1, "guimovetoback", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "setSearchLightEndRadius", "", "", ["searchlight theSearchlight", "float endRadius"], {}).toCompletionItem(),
				new MTAFunction(1, "guiGetText", "", "", ["element guiElement"], {}).toCompletionItem(),
				new MTAFunction(1, "getHeliBladeCollisionsEnabled", "This function gets the state of the helicopter blades collisions on the specified vehicle.This example shows the blade collisions state", "", ["vehicle theVehicle"], {}).toCompletionItem(),
				new MTAFunction(1, "dxCreateTexture", "", "", ["string filepath [", "string textureFormat = \"argb\"", "bool mipmaps = true", "string textureEdge = \"wrap\" ]"], {}).toCompletionItem(),
				new MTAFunction(1, "guiGetEnabled", "", "", ["element guiElement"], {}).toCompletionItem(),
				new MTAFunction(1, "engineGetVisibleTextureNames", "", "", ["[ string nameFilter = \" * \"", "string modelId = \"\" ]"], {}).toCompletionItem(),
				new MTAFunction(1, "getPedControlState", "Checks whether a ped has a certain control pressed.", "", ["ped thePed", "string control"], {}).toCompletionItem(),
				new MTAFunction(1, "getEffectSpeed", "This function gets the speed of a specified effect.", "", ["effect theEffect"], {}).toCompletionItem(),
				new MTAFunction(1, "respawnObject", "This function respawns a specific object.", "", ["object theObject"], {}).toCompletionItem(),
				new MTAFunction(1, "isObjectBreakable", "This function checks if an object is breakable.", "", ["object theObject"], {}).toCompletionItem(),
				new MTAFunction(1, "getLightType", "", "", ["light theLight"], {}).toCompletionItem(),
				new MTAFunction(1, "isElementCollidableWith", "", "", ["element theElement", "element withElement"], {}).toCompletionItem(),
				new MTAFunction(1, "float, float getPedWeaponMuzzlePosition", "This Example draws a red 3D-Line when a Player shoots,between the Players WeaponMuzzlePosition and the Point where the Bullet hits.[Tested]", "", ["ped thePed"], {}).toCompletionItem(),
				new MTAFunction(1, "ischatboxinputactive", "This function returns whether the ingame chatbox is being used (accepting chatbox input) or not.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "engineRestoreModel", "This function restores the visual DFF model of the given model ID. This restores the result of engineReplaceModel.Client-Side example for restoring model / vehicle.Server-Side example for triggering model / vehicle restore function with \"restore\" command.", "", ["int modelID"], {}).toCompletionItem(),
				new MTAFunction(1, "engineApplyShaderToWorldTexture", "", "", ["element shader", "string textureName [", "element targetElement = nil", "bool appendLayers = true ]"], {}).toCompletionItem(),
				new MTAFunction(1, "guiGetProperty", "", "", ["element guiElement", "string property"], {}).toCompletionItem(),
				new MTAFunction(1, "engineSetModelLODDistance", "", "", ["int model", "float distance"], {}).toCompletionItem(),
				new MTAFunction(1, "dxDrawImageSection", "Differing from dxDrawImage, this function only draws a part of an image on the screen for a single frame. In order for the image to stay visible continuously, you need to call this function with the same parameters on each frame update (see onClientRender).", "", ["float posX", "float posY", "float width", "float height", "float u", "float v", "float usize", "float vsize", "mixed image", "[ float rotation = 0", "float rotationCenterOffsetX = 0", "float rotationCenterOffsetY = 0", "int color = white", "bool postGUI = false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "isElementLocal", "This function checks whether a clientside element is local to the client (doesn't exist in the server) or not.", "", ["element theElement"], {}).toCompletionItem(),
				new MTAFunction(1, "isElementOnScreen", "This function will check if an element is on the screen. Elements behind objects but still in the camera view count as being on screen.", "", ["element theElement"], {}).toCompletionItem(),
				new MTAFunction(1, "fxAddPunchImpact", "This example will create a Punch Impact Effect next to you when typing /pimpact in the Chatbox.", "", ["float posX", "float posY", "float posZ", "float dirX", "float dirY", "float dirZ"], {}).toCompletionItem(),
				new MTAFunction(1, "getLightRadius", "", "", ["light theLight"], {}).toCompletionItem(),
				new MTAFunction(1, "guiGetProperties", "", "", ["element guiElement"], {}).toCompletionItem(),
				new MTAFunction(1, "engineGetModelIDFromName", "", "", ["string modelName"], {}).toCompletionItem(),
				new MTAFunction(1, "dxgetblendmode", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "getProjectileCounter", "Get the time left before a projectile detonates.With this example you can find out how long does it take for a projectile to explode/end", "", ["projectile projectile"], {}).toCompletionItem(),
				new MTAFunction(1, "dxgetstatus", "", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "getSearchLightStartRadius", "", "", ["searchlight theSearchLight"], {}).toCompletionItem(),
				new MTAFunction(1, "float float getPedBonePosition", "Returns the 3D world coordinates of a specific bone of a given ped.", "", ["ped thePed", "int bone"], {}).toCompletionItem(),
				new MTAFunction(1, "setElementStreamable", "", "", ["element theElement", "bool streamable"], {}).toCompletionItem(),
				new MTAFunction(1, "setPedVoice", "", "", ["ped thePed", "string voiceType", "string voiceName"], {}).toCompletionItem(),
				new MTAFunction(1, "toggleObjectRespawn", "", "", ["object theObject", "bool respawn"], {}).toCompletionItem(),
				new MTAFunction(1, "getPedOxygenLevel", "This function returns the current oxygen level of the specified ped.This example defines a \"showoxygen\" console command that shows the player that executes it which oxygen level he has.", "", ["ped thePed"], {}).toCompletionItem(),
				new MTAFunction(1, "getInteriorFurnitureEnabled", "This function will tell you if interior furniture are enabled or disabled in a specified room ID.", "", ["int roomID"], {}).toCompletionItem(),
				new MTAFunction(1, "getbirdsenabled", "This function will tell you if the birds are enabled or disabled.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "getplayermapboundingbox", "This function gets the GUI bounding box of the radar map texture.", "", ["??"], {}).toCompletionItem(),
				new MTAFunction(1, "createSWATRope", "Creates a SWAT rope like that of the rope in single player used by SWAT Teams abseiling from the Police Maverick.", "", ["float fx", "float fy", "float fZ", "int duration"], {}).toCompletionItem(),
				new MTAFunction(1, "setPedAnalogControlState", "", "", ["ped thePed", "string control", "float state"], {}).toCompletionItem(),
				new MTAFunction(1, "getProjectileForce", "This function returns the force of the specified projectile.", "", ["projectile theProjectile"], {}).toCompletionItem(),
				new MTAFunction(1, "string getPedAnimation", "", "", ["ped thePed"], {}).toCompletionItem(),
				new MTAFunction(1, "getProjectileType", "This function returns the type of the specified projectile.", "", ["projectile theProjectile"], {}).toCompletionItem(),
				new MTAFunction(1, "setSearchLightStartRadius", "", "", ["searchlight theSearchlight", "float startRadius"], {}).toCompletionItem(),
				new MTAFunction(1, "createProjectile", "This function creates a projectile of the specified type on the specified coordinates.", "", ["element creator", "int weaponType [", "float posX", "float posY", "float posZ", "float force = 1.0", "element target = nil", "float rotX", "float rotY", "float rotZ", "float velX", "float velY", "float velZ", "int model ]"], {}).toCompletionItem(),
				new MTAFunction(1, "getHelicopterRotorSpeed", "Retrieves the speed at which the rotor of a helicopter rotates.", "", ["vehicle heli"], {}).toCompletionItem(),
				new MTAFunction(1, "givePedWeapon", "This function gives the specified weapon to the specified ped. This function can't be used on players, use giveWeapon for that.", "", ["ped thePed", "int weapon [", "int ammo=30", "bool setAsCurrent=false ]"], {}).toCompletionItem(),
				new MTAFunction(1, "getProjectileTarget", "This function returns the target of the specified projectile.", "", ["projectile theProjectile"], {}).toCompletionItem(),
			];
		}
	});
}
